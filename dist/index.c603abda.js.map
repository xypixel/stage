{"mappings":"SAWSA,IACP,MAAMC,EAAcC,OAAOC,WACrBC,EAAeF,OAAOG,YACtBC,EAAoBL,EAAcG,EAIlCG,GAHmBD,EAAoBF,EAAeH,GAG3BO,EAAOC,WACxCD,EAAOE,WAAaH,EAHM,EAGsBA,EAAQI,KAAKC,MAAML,GAEnE,MAAME,EAAaD,EAAOC,WAAaD,EAAOE,WAE9CF,EAAOK,QAASC,MAAQL,EACxBD,EAAOK,QAASE,OAASN,EAEzBD,EAAOK,QAASG,MAAMC,KAAWhB,EAAc,EAAMQ,EAAa,EAAxC,KAC1BD,EAAOK,QAASG,MAAME,IAAMZ,EACtBF,EAAe,EAAMK,EAAa,EADK,KAE3C,IAGJ,MAAMD,EAAiB,CACrBK,QAAS,KACTM,QAAS,KACTV,WAAY,IACZC,WAAY,YAmBEU,IACd,IAAKZ,EAAOK,QACV,MAAM,IAAIQ,MAAM,iCAGlB,OAAOb,YArBac,EAAyB,IAC7C,MAAMC,EAAS,CACbd,WAAY,OACTa,GAGLd,EAAOK,QAAUW,SAASC,cAAc,UACxCjB,EAAOW,QAAUX,EAAOK,QAASa,WAAW,MAC5ClB,EAAOC,WAAac,EAAOd,WAE3BT,IAEAE,OAAOyB,SAAW3B,EAClBE,OAAO0B,oBAAsB5B,EClD/B6B,YAiCSC,cA/BUC,EAAWC,EAAWlB,EAAeC,EAAgBkB,GACtE,MAAMC,EAAMd,IAAmBV,WACzBS,EAAUC,IAAmBD,QAC7BgB,EAAchB,EAAQgB,YAE5BhB,EAASgB,YAAc,EAEnBF,IACFd,EAAQiB,UAAYH,EACpBd,EAAQkB,SACNN,EAAIG,EACJF,EAAIE,EACJpB,EAAQoB,EACRnB,EAASmB,IAebf,EAAQgB,YAAcA,EAItBG,CAAS,EAAG,EAAG,GAAI,IAAK,WAExBC,uBAAqB,KACnBT,OAIJA","sources":["src/canvas.ts","src/index.ts"],"sourcesContent":["export interface Canvas {\n  element: HTMLCanvasElement | null;\n  context: CanvasRenderingContext2D | null;\n  dimensions: number;\n  pixelScale: number;\n}\n\nexport interface CanvasOptions {\n  dimensions?: number;\n}\n\nfunction handleResize (): void {\n  const screenWidth = window.innerWidth;\n  const screenHeight = window.innerHeight;\n  const screenIsLandscape = screenWidth > screenHeight;\n  const actualDimensions = screenIsLandscape ? screenHeight : screenWidth;\n  const aliasingThreshold = 2;\n  \n  const scale = actualDimensions / canvas.dimensions;\n  canvas.pixelScale = scale < aliasingThreshold ? scale : Math.floor(scale);\n\n  const dimensions = canvas.dimensions * canvas.pixelScale;\n\n  canvas.element!.width = dimensions;\n  canvas.element!.height = dimensions;\n\n  canvas.element!.style.left = `${(screenWidth / 2) - (dimensions / 2)}px`;\n  canvas.element!.style.top = screenIsLandscape ?\n    `${(screenHeight / 2) - (dimensions / 2)}px` :\n    '0';\n}\n\nconst canvas: Canvas = {\n  element: null,\n  context: null,\n  dimensions: 256,\n  pixelScale: 1\n};\n\nexport function init (options: CanvasOptions = {}): void {\n  const config = {\n    dimensions: 256,\n    ...options\n  };\n\n  canvas.element = document.querySelector('canvas');\n  canvas.context = canvas.element!.getContext('2d');\n  canvas.dimensions = config.dimensions;\n\n  handleResize();\n\n  window.onresize = handleResize;\n  window.ondeviceorientation = handleResize;\n}\n\nexport function getCanvas (): Canvas {\n  if (!canvas.element) {\n    throw new Error('Please call canvas#init first');\n  }\n\n  return canvas;\n}\n\nexport function resetCanvas (): void {\n  canvas.element = null;\n  canvas.context = null;\n  canvas.dimensions = 256;\n  canvas.pixelScale = 1;\n}\n","import * as canvas from './canvas';\n\ncanvas.init();\n\nfunction drawRect (x: number, y: number, width: number, height: number, fill: string) {\n  const ppp = canvas.getCanvas().pixelScale;\n  const context = canvas.getCanvas().context!;\n  const globalAlpha = context.globalAlpha;\n  \n  context!.globalAlpha = 1;\n  \n  if (fill) {\n    context.fillStyle = fill;\n    context.fillRect(\n      x * ppp,\n      y * ppp,\n      width * ppp,\n      height * ppp\n    );\n  }\n  \n  // if (strokeColor) {\n  //   context.strokeStyle = strokeColor;\n  //   context.lineWidth = strokeWidth;\n  //   context.strokeRect(\n  //     x * ppp,\n  //     y * ppp,\n  //     width * ppp,\n  //     height * ppp\n  //   );\n  // }\n  \n  context.globalAlpha = globalAlpha;\n}\n\nfunction draw () {\n  drawRect(4, 4, 64, 128, '#c0ff33');\n\n  requestAnimationFrame(() => {\n    draw();\n  });\n}\n\ndraw();\n"],"names":["$c70a59f288365af6$var$handleResize","screenWidth","window","innerWidth","screenHeight","innerHeight","screenIsLandscape","scale","$c70a59f288365af6$var$canvas","dimensions","pixelScale","Math","floor","element","width","height","style","left","top","context","$c70a59f288365af6$export$f80a6900d44a74ee","Error","options","config","document","querySelector","getContext","onresize","ondeviceorientation","$c70a59f288365af6$export$2cd8252107eb640b","$e04467055a32edce$var$draw","x","y","fill","ppp","globalAlpha","fillStyle","fillRect","$e04467055a32edce$var$drawRect","requestAnimationFrame"],"version":3,"file":"index.c603abda.js.map"}