{"mappings":"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","sources":["src/geometry.ts","src/Buttons.ts","examples/console.ts","src/collision.ts","src/Screen.ts","src/Console.ts"],"sourcesContent":["export class Point {\n  public x: number;\n  public y: number;\n\n  constructor (x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport class Rect {\n  public height: number;\n  public width: number;\n  public x: number;\n  public y: number;\n\n  constructor (x: number, y: number, width: number, height: number) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  public get bottom (): number {\n    return this.y + this.height;\n  }\n\n  public get left (): number {\n    return this.x;\n  }\n\n  public get right (): number {\n    return this.x + this.width;\n  }\n\n  public get top (): number {\n    return this.y;\n  }\n}\n","import { checkPointRect } from \"./collision\";\nimport { Point } from \"./geometry\";\n\nenum DPadButtons {\n  Up = 'Up',\n  Lt = 'Lt',\n  Dn = 'Dn',\n  Rt = 'Rt',\n  Center = 'Center',\n  LtUp = 'LtUp',\n  LtDn = 'LtDn',\n  RtUp = 'RtUp',\n  RtDn = 'RtDn'\n}\n\ninterface DPadButtonItem {\n  name: DPadButtons;\n  element: HTMLDivElement | null;\n  isPressed: boolean;\n}\n\nexport default class Buttons {\n  public dPadElement: HTMLDivElement;\n  public dPadButtons: DPadButtonItem[] = [\n    {\n      name: DPadButtons.LtUp,\n      isPressed: false,\n      element: null\n    },\n    {\n      name: DPadButtons.Up,\n      isPressed: false,\n      element: null\n    },\n    {\n      name: DPadButtons.RtUp,\n      isPressed: false,\n      element: null\n    },\n    {\n      name: DPadButtons.Lt,\n      isPressed: false,\n      element: null\n    },\n    {\n      name: DPadButtons.Center,\n      isPressed: false,\n      element: null\n    },\n    {\n      name: DPadButtons.Rt,\n      isPressed: false,\n      element: null\n    },\n    {\n      name: DPadButtons.LtDn,\n      isPressed: false,\n      element: null\n    },\n    {\n      name: DPadButtons.Dn,\n      isPressed: false,\n      element: null\n    },\n    {\n      name: DPadButtons.RtDn,\n      isPressed: false,\n      element: null\n    }\n  ];\n  public actionBtnIElement: HTMLDivElement;\n  public actionBtnIIElement: HTMLDivElement;\n\n  constructor () {\n    this.dPadElement = document.querySelector('#dPad')!;\n\n    this.dPadButtons.forEach((item) => {\n      item.element = document.querySelector(`#${item.name}`);\n    });\n\n    this.actionBtnIElement = document.querySelector('#actionBtnI')!;\n    this.actionBtnIIElement = document.querySelector('#actionBtnII')!;\n\n    this.dPadElement.addEventListener('touchstart', (event) => {\n      this.setActiveDPadElements(this.dPadButtons.find((item) => item.name === (event.target as HTMLElement).id)!);\n    }, false);\n    this.dPadElement.addEventListener('touchmove', (event: TouchEvent) => {\n      event.preventDefault();\n\n      this.dPadButtons.forEach((item) => {\n        item.element?.classList.remove('active');\n      });\n\n      const firstTouch = event.touches[0];\n      \n      this.dPadButtons.forEach((item) => {\n        if (checkPointRect(new Point(firstTouch.pageX, firstTouch.pageY), item.element!.getBoundingClientRect())) {\n          this.setActiveDPadElements(item);\n        }\n      });\n    }, false);\n    this.dPadElement.addEventListener('touchend', (event) => {\n      this.dPadButtons.forEach((item) => {\n        item.element?.classList.remove('active');\n      });\n    }, false);\n\n    this.actionBtnIElement.addEventListener('touchstart', (event) => {\n      (event.target as HTMLElement).classList.add('active');\n    }, false);\n    this.actionBtnIElement.addEventListener('touchmove', (event: TouchEvent) => {\n      event.preventDefault();\n    }, false);\n    this.actionBtnIElement.addEventListener('touchend', (event) => {\n      (event.target as HTMLElement).classList.remove('active');\n    }, false);\n\n    this.actionBtnIIElement.addEventListener('touchstart', (event) => {\n      (event.target as HTMLElement).classList.add('active');\n    }, false);\n    this.actionBtnIIElement.addEventListener('touchmove', (event: TouchEvent) => {\n      event.preventDefault();\n    }, false);\n    this.actionBtnIIElement.addEventListener('touchend', (event) => {\n      (event.target as HTMLElement).classList.remove('active');\n    }, false);\n  }\n\n  private setActiveDPadElements (item: DPadButtonItem): void {\n    if (item.name === DPadButtons.LtUp) {\n      this.dPadButtons.find((item) => item.name === DPadButtons.Lt)?.element?.classList.add('active');\n      this.dPadButtons.find((item) => item.name === DPadButtons.Up)?.element?.classList.add('active');\n    } else if (item.name === DPadButtons.RtUp) {\n      this.dPadButtons.find((item) => item.name === DPadButtons.Rt)?.element?.classList.add('active');\n      this.dPadButtons.find((item) => item.name === DPadButtons.Up)?.element?.classList.add('active');\n    } else if (item.name === DPadButtons.LtDn) {\n      this.dPadButtons.find((item) => item.name === DPadButtons.Lt)?.element?.classList.add('active');\n      this.dPadButtons.find((item) => item.name === DPadButtons.Dn)?.element?.classList.add('active');\n    } else if (item.name === DPadButtons.RtDn) {\n      this.dPadButtons.find((item) => item.name === DPadButtons.Rt)?.element?.classList.add('active');\n      this.dPadButtons.find((item) => item.name === DPadButtons.Dn)?.element?.classList.add('active');\n    } else {\n      item.element?.classList.add('active');\n    }\n  }\n}\n","import Buttons from \"~src/Buttons\";\nimport Console from \"../src/Console\";\nimport Screen from \"../src/Screen\";\n\nconst buttons = new Buttons();\nconst screen = new Screen();\n\nnew Console({\n  buttons,\n  screen\n});\n","import { Point, Rect } from \"./geometry\";\n\nexport function checkPointRect (point: Point, rect: Rect): boolean {\n  return point.x > rect.x && point.x < rect.right && point.y > rect.y && point.y < rect.bottom;\n}\n","export default class Screen {\n  public dimensions: number = 256;\n  public element: HTMLCanvasElement;\n  public context: CanvasRenderingContext2D;\n  public pixelScale: number = 1;\n  public antiAliasingScaleThreshold = 4;\n\n  constructor () {\n    this.element = document.querySelector('#screen')!;\n    this.context = this.element.getContext('2d')!;\n    this.context.imageSmoothingEnabled = false;\n    this.context.imageSmoothingQuality = 'low';\n  }\n\n  public setPixelScale (calculatedScreenDimensions: number): void {\n    const scale = calculatedScreenDimensions / this.dimensions;\n    this.pixelScale = scale > this.antiAliasingScaleThreshold ? Math.floor(scale) : scale;\n  }\n}\n","import Buttons from \"./Buttons\";\nimport Screen from \"./Screen\";\n\nexport interface ConsoleParams {\n  screen: Screen;\n  buttons: Buttons;\n}\n\nexport default class Console {\n  private screen: Screen;\n  private buttons: Buttons;\n\n  private leftConElement: HTMLDivElement;\n  private rightConElement: HTMLDivElement;\n\n  private calculatedScreenDimensions: number = 256;\n\n  constructor (params: ConsoleParams) {\n    this.screen = params.screen;\n    this.buttons = params.buttons;\n    this.leftConElement = document.querySelector('#leftCon')!;\n    this.rightConElement = document.querySelector('#rightCon')!;\n\n    document.addEventListener('contextmenu', e => e.preventDefault());\n\n    this.calculatePositionAndScale();\n\n    window.addEventListener('resize', () => {\n      this.calculatePositionAndScale();\n    }, false);\n    window.addEventListener('deviceorientation', () => {\n      this.calculatePositionAndScale();\n    }, false);\n  }\n\n  private calculatePositionAndScale (): void {\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n    const viewportIsLandscape = viewportWidth > viewportHeight;\n    \n    this.calculatedScreenDimensions = Math.floor(\n      viewportIsLandscape ?\n        viewportWidth / viewportHeight < 2 ? viewportWidth / 2 : viewportHeight :\n        viewportHeight / viewportWidth < 2 ? viewportHeight / 2 : viewportWidth\n    );\n\n    this.screen.setPixelScale(this.calculatedScreenDimensions);\n\n    if (this.calculatedScreenDimensions / this.screen.dimensions > this.screen.pixelScale) { // ie: anti aliasing threshold exceeded\n      this.calculatedScreenDimensions = this.screen.dimensions * this.screen.pixelScale;\n    }\n\n    this.screen.element.width = this.calculatedScreenDimensions;\n    this.screen.element.height = this.calculatedScreenDimensions;\n\n    this.positionAndScaleElements(viewportWidth, viewportHeight, viewportIsLandscape);\n  }\n\n  private positionAndScaleElements (\n    viewportWidth: number,\n    viewportHeight: number,\n    viewportIsLandscape: boolean\n  ): void {\n    const screenLeft = viewportWidth / 2 - this.calculatedScreenDimensions / 2;\n    const screenTop = viewportHeight / 2 - (viewportIsLandscape ? this.calculatedScreenDimensions / 2 : this.calculatedScreenDimensions);\n    const leftConLeft = viewportIsLandscape ? screenLeft - this.calculatedScreenDimensions / 2 : screenLeft;\n    const leftConTop = viewportIsLandscape ? screenTop : screenTop + this.calculatedScreenDimensions;\n    const rightConLeft = viewportIsLandscape ? screenLeft + this.calculatedScreenDimensions : screenLeft + this.calculatedScreenDimensions / 2;\n    const rightConTop = viewportIsLandscape ? screenTop : screenTop + this.calculatedScreenDimensions;\n    const conWidth = this.calculatedScreenDimensions / 2;\n    const conHeight = this.calculatedScreenDimensions;\n    \n    const dPadDimensions = conWidth / 1.6;\n    const dPadIndividualButtonDimensions = dPadDimensions / 3;\n    const dPadLeft = (leftConLeft + conWidth / 2) - dPadDimensions / 2;\n    const dPadTop = (leftConTop + conHeight / 2) - dPadDimensions / 2;\n\n    (() => {\n      let x = 0;\n      let y = 0;\n\n      this.buttons.dPadButtons.forEach((item) => {\n        item.element!.style.left = `${x * dPadIndividualButtonDimensions}px`;\n        item.element!.style.top = `${y * dPadIndividualButtonDimensions}px`;\n        item.element!.style.width = `${dPadIndividualButtonDimensions}px`;\n        item.element!.style.height = `${dPadIndividualButtonDimensions}px`;\n\n        y = x === 2 ? y + 1 : y;\n        x = x !== 2 ? x + 1 : 0;\n      });\n    })();\n\n    const actionBtnDimensions = conWidth / 3.6;\n    const actionBtnSpacing = conWidth / 9;\n    const actionBtnCenterX = rightConLeft + conWidth / 2;\n    const actionBtnCenterY = rightConTop + conHeight / 2;\n    \n    this.screen.element.style.left = `${screenLeft}px`;\n    this.screen.element.style.top = `${screenTop}px`;\n    \n    this.buttons.dPadElement.style.left = `${dPadLeft}px`;\n    this.buttons.dPadElement.style.top = `${dPadTop}px`;\n    this.buttons.dPadElement.style.width = `${dPadDimensions}px`;\n    this.buttons.dPadElement.style.height = `${dPadDimensions}px`;\n\n    this.buttons.dPadElement.style.left = `${dPadLeft}px`;\n    this.buttons.dPadElement.style.top = `${dPadTop}px`;\n    this.buttons.dPadElement.style.width = `${dPadDimensions}px`;\n    this.buttons.dPadElement.style.height = `${dPadDimensions}px`;\n    \n    this.buttons.actionBtnIElement.style.left = `${actionBtnCenterX - actionBtnSpacing / 2 - actionBtnDimensions}px`;\n    this.buttons.actionBtnIElement.style.top = `${actionBtnCenterY}px`;\n    this.buttons.actionBtnIElement.style.width = `${actionBtnDimensions}px`;\n    this.buttons.actionBtnIElement.style.height = `${actionBtnDimensions}px`;\n    \n    this.buttons.actionBtnIIElement.style.left = `${actionBtnCenterX + actionBtnSpacing / 2}px`;\n    this.buttons.actionBtnIIElement.style.top = `${actionBtnCenterY - actionBtnDimensions}px`;\n    this.buttons.actionBtnIIElement.style.width = `${actionBtnDimensions}px`;\n    this.buttons.actionBtnIIElement.style.height = `${actionBtnDimensions}px`;\n\n    this.leftConElement.style.left = `${leftConLeft}px`;\n    this.leftConElement.style.top = `${leftConTop}px`;\n    this.leftConElement.style.width = `${conWidth}px`;\n    this.leftConElement.style.height = `${conHeight}px`;\n\n    this.rightConElement.style.left = `${rightConLeft}px`;\n    this.rightConElement.style.top = `${rightConTop}px`;\n    this.rightConElement.style.width = `${conWidth}px`;\n    this.rightConElement.style.height = `${conHeight}px`;\n  }\n}\n"],"names":["$b87507472c4fc21b$export$baf26146a414f24a","x","y","this","DPadButtons","$97b231d28a326e92$var$DPadButtons","$e6b70c27f001525d$var$buttons","dPadButtons","name","LtUp","isPressed","element","Up","RtUp","Lt","Center","Rt","LtDn","Dn","RtDn","dPadElement","document","querySelector","forEach","item","actionBtnIElement","actionBtnIIElement","addEventListener","event","setActiveDPadElements","find","target","id","preventDefault","classList","remove","firstTouch","touches","point","rect","pageX","pageY","getBoundingClientRect","right","bottom","add","item1","$e6b70c27f001525d$var$screen","dimensions","pixelScale","antiAliasingScaleThreshold","context","getContext","imageSmoothingEnabled","imageSmoothingQuality","setPixelScale","calculatedScreenDimensions","scale","Math","floor","params","screen","buttons","leftConElement","rightConElement","e","calculatePositionAndScale","window","viewportWidth","innerWidth","viewportHeight","innerHeight","viewportIsLandscape","width","height","positionAndScaleElements","screenLeft","screenTop","leftConLeft","leftConTop","rightConLeft","rightConTop","conWidth","conHeight","dPadDimensions","dPadIndividualButtonDimensions","dPadLeft","dPadTop","style","left","top","actionBtnDimensions","actionBtnSpacing","actionBtnCenterX","actionBtnCenterY"],"version":3,"file":"index.76bb1e99.js.map"}